cmake_minimum_required(VERSION 3.4)
project(luacpptemplater)

option(BUILD_TESTS
       "Build unit-tests." OFF)
option(DEV_RUN_COG
       "Only EasyCL maintainers need this, otherwise set to 'OFF'." OFF)
option(PROVIDE_LUA_ENGINE
       "For example for Torch, we use Torch's engine." ON)

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set(CMAKE_INSTALL_PREFIX
        "${CMAKE_CURRENT_SOURCE_DIR}/dist"
        CACHE PATH
        "Installation prefix, default 'dist'"
        FORCE)
endif()

# https://cmake.org/Wiki/CMake_RPATH_handling
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
set(CMAKE_MACOSX_RPATH TRUE)

if(BUILD_TESTS AND NOT PROVIDE_LUA_ENGINE)
    message("Error: if building tests, need to enable PROVIDE_LUA_ENGINE")
endif()

include_directories(.)
include_directories(SYSTEM thirdparty/lua-5.1.5/src)
set(TEMPLATESRC LuaTemplater.cpp util/luacpptemplater_stringhelper.cpp)
set(TEMPLATETESTS test/testLuaTemplater.cpp)

if(UNIX)
    set(EXTRA_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall")
endif()

if(PROVIDE_LUA_ENGINE)
    file(STRINGS thirdparty/lua-5.1.5/files.txt lua_src1)
    foreach(source ${lua_src1})
        set(lua_src ${lua_src} thirdparty/lua-5.1.5/src/${source})
    endforeach()
    if(APPLE)
        set_target_properties(
            luacpptemplater
            PROPERTIES
                LINK_FLAGS "-single_module"
                COMPILE_FLAGS ${EXTRA_CXX_FLAGS}
        )
        add_definitions(-DLUA_USE_LINUX)
    endif()
else()
    if(APPLE)
        set_target_properties(luacpptemplater PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
    endif()
endif()

add_library(luacpptemplater STATIC LuaTemplater.cpp util/luacpptemplater_stringhelper ${lua_src})

if(BUILD_TESTS)
    if(UNIX)
        add_library(luacpptemplater_gtest STATIC thirdparty/gtest/gtest-all.cc)
        target_link_libraries(luacpptemplater pthread)
    else()
        add_library(luacpptemplater_gtest thirdparty/gtest/gtest-all.cc)
    endif()

    add_executable(luacpptemplater_unittests ${TEMPLATETESTS} test/gtest_main.cpp test/GtestGlobals.cpp)
    target_link_libraries(luacpptemplater_unittests luacpptemplater_gtest luacpptemplater)
    target_include_directories(luacpptemplater_unittests PRIVATE thirdparty/gtest)
endif()

if(DEV_RUN_COG)
    add_custom_target(
        cog
        python ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/cogapp/cog.py -q -I ${CMAKE_CURRENT_SOURCE_DIR}/cog-batteries -r ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/test/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/*.h  ${CMAKE_CURRENT_SOURCE_DIR}/util/*.h  ${CMAKE_CURRENT_SOURCE_DIR}/util/*.cpp
   )
    add_dependencies(luacpptemplater cog)
endif()

install(
    TARGETS luacpptemplater
    EXPORT luacpptemplater-targets
    RUNTIME DESTINATION bin
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
)

file(GLOB HEADERS_ROOT *.h)
install(FILES ${HEADERS_ROOT} DESTINATION include/luacpptemplater)
install(EXPORT luacpptemplater-targets DESTINATION lib/luacpptemplater)

if(BUILD_TESTS)
   install(TARGETS luacpptemplater_gtest luacpptemplater_unittests
      LIBRARY DESTINATION lib
      ARCHIVE DESTINATION lib
      RUNTIME DESTINATION bin
  )
endif()

